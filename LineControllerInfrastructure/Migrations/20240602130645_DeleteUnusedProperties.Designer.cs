// <auto-generated />
using System;
using LineControllerInfrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LineControllerInfrastructure.Migrations
{
    [DbContext(typeof(LineContextDb))]
    [Migration("20240602130645_DeleteUnusedProperties")]
    partial class DeleteUnusedProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LineControllerInfrastructure.Entities.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActivityTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("PassiveCostFactor")
                        .HasColumnType("DECIMAL(18, 3)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("LastChangedUserId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ActivityType", (string)null);
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.CalibrationAction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CalibrationAction", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Calibration"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Checking"
                        },
                        new
                        {
                            Id = 3,
                            Name = "DMS application"
                        });
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.CompanyLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyLocationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("LastChangedUserId");

                    b.ToTable("CompanyLocation", (string)null);
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeviceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accessories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CalibrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CalibrationInterval")
                        .HasColumnType("int");

                    b.Property<string>("CalibrationLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CalibrationResult")
                        .HasColumnType("DECIMAL(18, 3)");

                    b.Property<string>("CalibrationTester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CostFactor")
                        .HasColumnType("DECIMAL(18, 3)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceClassId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InventoryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaterialNumber")
                        .HasColumnType("DECIMAL(18, 3)")
                        .HasColumnName("SAPOrderNumber");

                    b.Property<decimal?>("MeasurementMax")
                        .HasColumnType("DECIMAL(18, 4)");

                    b.Property<decimal?>("MeasurementMin")
                        .HasColumnType("DECIMAL(18, 4)");

                    b.Property<string>("MeasurementUnit")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<bool>("Reservation")
                        .HasColumnType("bit");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("StoragePlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeviceClassId");

                    b.HasIndex("ItemNumber")
                        .IsUnique();

                    b.HasIndex("LastChangedUserId");

                    b.HasIndex("ParentId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StoragePlaceId");

                    b.ToTable("Device", null, t =>
                        {
                            t.HasTrigger("UpdateItemNumber");

                            t.HasCheckConstraint("CHK_DeviceActivityTypeAndCostFactor", "([ActivityTypeId] IS NULL) OR ([ActivityTypeId] IS NOT NULL AND [CostFactor] IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceCalibrationOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CalibrationOrderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CalibrationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CalibrationResult")
                        .HasColumnType("DECIMAL(18, 3)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int?>("DeviceId1")
                        .HasColumnType("int");

                    b.Property<bool>("Edited")
                        .HasColumnType("bit");

                    b.Property<string>("Inspector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MeasurementSpan")
                        .HasColumnType("DECIMAL(18, 3)");

                    b.Property<int?>("PreviousDeviceStatusId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProcessingTime")
                        .HasColumnType("DECIMAL(18, 3)");

                    b.Property<int>("RootId")
                        .HasColumnType("int");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("bit");

                    b.Property<string>("TestLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("DeviceId1");

                    b.HasIndex("LastChangedUserId");

                    b.HasIndex("PreviousDeviceStatusId");

                    b.HasIndex("RootId");

                    b.ToTable("DeviceCalibrationOrder", (string)null);
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceCalibrationOrderRoot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CalibrationOrderRootId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AccountingType")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.Property<int>("NoChannels")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("LastChangedUserId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("DeviceCalibrationOrderRoot", (string)null);
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceCalibrationOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeviceCalibrationOrderStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Name = "Received"
                        },
                        new
                        {
                            Id = 20,
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Sent Externally"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Finished (OK)"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Finished (NOK)"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Finished (Adjusted)"
                        },
                        new
                        {
                            Id = 100,
                            Name = "Finished (OK after Adjustment)"
                        },
                        new
                        {
                            Id = 110,
                            Name = "Finished (Scrap)"
                        },
                        new
                        {
                            Id = 120,
                            Name = "Returned"
                        });
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceCalibrationOrderStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CalibrationOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastChangedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalibrationOrderId");

                    b.HasIndex("LastChangedUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("DeviceCalibrationOrderStatusHistory", (string)null);
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeviceClassId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeviceModelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeviceModelId")
                        .IsUnique();

                    b.HasIndex("LastChangedUserId");

                    b.ToTable("DeviceClass", (string)null);
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceClassMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeviceModeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.Property<string>("MaterialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MeasurementMax")
                        .HasColumnType("DECIMAL(18, 4)");

                    b.Property<decimal?>("MeasurementMin")
                        .HasColumnType("DECIMAL(18, 4)");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("OutputMax")
                        .HasColumnType("DECIMAL(18, 4)");

                    b.Property<decimal?>("OutputMin")
                        .HasColumnType("DECIMAL(18, 4)");

                    b.Property<string>("OutputUnit")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("TemperatureMax")
                        .HasColumnType("real");

                    b.Property<float?>("TemperatureMin")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DeviceClassId");

                    b.HasIndex("LastChangedUserId");

                    b.ToTable("DeviceClassMode", (string)null);
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceHierarchy", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.HasKey("ParentId", "ChildId");

                    b.ToTable((string)null);

                    b.ToView("DeviceHierarchy", (string)null);
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceHistory", b =>
                {
                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceId", "ModificationUserId", "ModificationDate");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("DeviceHistory", (string)null);
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeviceIssueId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AccountingType")
                        .HasColumnType("int");

                    b.Property<int>("AvoidDuplicate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("CASE WHEN [ReturnDateActual] IS NULL THEN [DeviceId] ELSE -[DeviceIssueId] END");

                    b.Property<int?>("CollectorId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnDateActual")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDatePlanned")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CollectorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeviceId");

                    b.HasIndex("LastChangedUserId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("ReturnDateActual");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("ReturnDateActual"), false);

                    b.ToTable("DeviceIssue", (string)null);
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeviceModelId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LastChangedUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DeviceModel", (string)null);
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeviceReservationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeviceClassId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("IssueId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MeasurementMax")
                        .HasColumnType("DECIMAL(18, 4)");

                    b.Property<decimal?>("MeasurementMin")
                        .HasColumnType("DECIMAL(18, 4)");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeviceClassId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("InventoryLocationId");

                    b.HasIndex("IssueId")
                        .IsUnique();

                    b.HasIndex("LastChangedUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("DeviceReservation", (string)null);
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeviceStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Name = "usable"
                        },
                        new
                        {
                            Id = 200,
                            Name = "defect"
                        },
                        new
                        {
                            Id = 300,
                            Name = "given away/disposed"
                        },
                        new
                        {
                            Id = 400,
                            Name = "lost"
                        },
                        new
                        {
                            Id = 500,
                            Name = "locked"
                        },
                        new
                        {
                            Id = 600,
                            Name = "being serviced"
                        });
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.InventoryLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InventoryLocationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ActivityTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal?>("CostFactor")
                        .HasColumnType("DECIMAL(18, 3)");

                    b.Property<bool>("GenerateCharge")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponsibleId")
                        .HasColumnType("int");

                    b.Property<bool>("SendManagerEmail")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("LastChangedUserId");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("InventoryLocation", null, t =>
                        {
                            t.HasCheckConstraint("CHK_ActivityTypeAndCostFactor", "([ActivityTypeId] IS NULL AND [CostFactor] IS NULL) OR ([ActivityTypeId] IS NOT NULL AND [CostFactor] IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.ReservationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Max")
                        .HasColumnType("int");

                    b.Property<int>("Min")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationPeriod", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Max = 2,
                            Min = 1,
                            Name = "1 ... 2 days"
                        },
                        new
                        {
                            Id = 2,
                            Max = 4,
                            Min = 2,
                            Name = "2 ... 4 days"
                        },
                        new
                        {
                            Id = 3,
                            Max = 14,
                            Min = 7,
                            Name = "1 ... 2 weeks"
                        },
                        new
                        {
                            Id = 4,
                            Max = 28,
                            Min = 14,
                            Name = "2 ... 4 weeks"
                        },
                        new
                        {
                            Id = 5,
                            Max = 42,
                            Min = 21,
                            Name = "3 ... 6 weeks"
                        },
                        new
                        {
                            Id = 6,
                            Max = 56,
                            Min = 28,
                            Name = "4 ... 8 weeks"
                        },
                        new
                        {
                            Id = 7,
                            Max = 84,
                            Min = 42,
                            Name = "6 ... 12 weeks"
                        },
                        new
                        {
                            Id = 8,
                            Max = 112,
                            Min = 56,
                            Name = "8 ... 16 weeks"
                        },
                        new
                        {
                            Id = 9,
                            Max = 168,
                            Min = 84,
                            Name = "12 ... 24 weeks"
                        },
                        new
                        {
                            Id = 10,
                            Min = 168,
                            Name = "more than 24"
                        });
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.ReservationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Canceled, in accordance with deadline"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Canceled, not in accordance with deadline"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Not collected"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Collected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Alternative rejected or not present"
                        });
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deactivated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LastChangedUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deactivated = false,
                            Name = "SysAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Deactivated = false,
                            Name = "CalibrationStaff"
                        },
                        new
                        {
                            Id = 3,
                            Deactivated = false,
                            Name = "DeviceManager"
                        },
                        new
                        {
                            Id = 4,
                            Deactivated = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = 5,
                            Deactivated = false,
                            Name = "DeviceMaster"
                        },
                        new
                        {
                            Id = 6,
                            Deactivated = false,
                            Name = "ChargeAdmin"
                        },
                        new
                        {
                            Id = 7,
                            Deactivated = false,
                            Name = "API"
                        });
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.StoragePlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StoragePlaceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyLocationId")
                        .HasColumnType("int");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InventoryLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ResponsibleId")
                        .HasColumnType("int");

                    b.Property<string>("RoomDesignation")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyLocationId");

                    b.HasIndex("InventoryLocationId");

                    b.HasIndex("LastChangedUserId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("InventoryLocationId", "Default")
                        .IsUnique()
                        .HasFilter("[Default] = 1");

                    b.HasIndex("InventoryLocationId", "CompanyLocationId", "Building", "Floor", "RoomNumber", "RoomDesignation", "Place")
                        .IsUnique();

                    b.ToTable("StoragePlace", null, t =>
                        {
                            t.HasCheckConstraint("CK_StoragePlace_Building_RoomDesignation", "ISNULL([Building], '') + ISNULL([RoomDesignation], '') > ''");
                        });
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyLocationId")
                        .HasColumnType("int");

                    b.Property<string>("CostCenter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastChangedUserId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserRoles")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyLocationId");

                    b.HasIndex("LastChangedUserId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PersonalNumber")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User", null, t =>
                        {
                            t.HasCheckConstraint("CHK_EmailAndDepartment", "[Status] <> 1 OR ([Email] IS NOT NULL AND [Email] <> '' AND [Department] IS NOT NULL AND [Department] <> '')");
                        });
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.ActivityType", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastChangedUser");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.CompanyLocation", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastChangedUser");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.Device", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("LineControllerInfrastructure.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("LineControllerInfrastructure.Entities.DeviceClass", "DeviceClass")
                        .WithMany()
                        .HasForeignKey("DeviceClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LineControllerInfrastructure.Entities.Device", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("LineControllerInfrastructure.Entities.DeviceStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.StoragePlace", "StoragePlace")
                        .WithMany("Devices")
                        .HasForeignKey("StoragePlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeviceClass");

                    b.Navigation("LastChangedUser");

                    b.Navigation("Parent");

                    b.Navigation("Status");

                    b.Navigation("StoragePlace");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceCalibrationOrder", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.Device", null)
                        .WithMany("CalibrationOrders")
                        .HasForeignKey("DeviceId1");

                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LineControllerInfrastructure.Entities.DeviceStatus", null)
                        .WithMany()
                        .HasForeignKey("PreviousDeviceStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LineControllerInfrastructure.Entities.DeviceCalibrationOrderRoot", "Root")
                        .WithMany()
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("LastChangedUser");

                    b.Navigation("Root");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceCalibrationOrderRoot", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.CalibrationAction", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LineControllerInfrastructure.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("LastChangedUser");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceCalibrationOrderStatusHistory", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.DeviceCalibrationOrder", "CalibrationOrder")
                        .WithMany("StatusHistory")
                        .HasForeignKey("CalibrationOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LineControllerInfrastructure.Entities.DeviceCalibrationOrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CalibrationOrder");

                    b.Navigation("LastChangedUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceClass", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.DeviceModel", "DeviceModel")
                        .WithMany()
                        .HasForeignKey("DeviceModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DeviceModel");

                    b.Navigation("LastChangedUser");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceClassMode", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.DeviceClass", "DeviceClass")
                        .WithMany("Modes")
                        .HasForeignKey("DeviceClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DeviceClass");

                    b.Navigation("LastChangedUser");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceHistory", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceIssue", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.User", "Collector")
                        .WithMany()
                        .HasForeignKey("CollectorId");

                    b.HasOne("LineControllerInfrastructure.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("LineControllerInfrastructure.Entities.Device", "Device")
                        .WithMany("Issues")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LineControllerInfrastructure.Entities.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Collector");

                    b.Navigation("CreatedBy");

                    b.Navigation("Device");

                    b.Navigation("LastChangedUser");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceModel", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastChangedUser");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceReservation", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.DeviceClass", null)
                        .WithMany()
                        .HasForeignKey("DeviceClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LineControllerInfrastructure.Entities.Device", "Device")
                        .WithMany("Reservations")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.InventoryLocation", "InventoryLocation")
                        .WithMany()
                        .HasForeignKey("InventoryLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.DeviceIssue", "Issue")
                        .WithOne("Reservation")
                        .HasForeignKey("LineControllerInfrastructure.Entities.DeviceReservation", "IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LineControllerInfrastructure.Entities.ReservationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Device");

                    b.Navigation("InventoryLocation");

                    b.Navigation("Issue");

                    b.Navigation("LastChangedUser");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.InventoryLocation", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LineControllerInfrastructure.Entities.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("LastChangedUser");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.Role", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId");

                    b.Navigation("LastChangedUser");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.StoragePlace", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.CompanyLocation", "CompanyLocation")
                        .WithMany()
                        .HasForeignKey("CompanyLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.InventoryLocation", "InventoryLocation")
                        .WithMany("StoragePlaces")
                        .HasForeignKey("InventoryLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LineControllerInfrastructure.Entities.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyLocation");

                    b.Navigation("InventoryLocation");

                    b.Navigation("LastChangedUser");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.User", b =>
                {
                    b.HasOne("LineControllerInfrastructure.Entities.CompanyLocation", "CompanyLocation")
                        .WithMany("Users")
                        .HasForeignKey("CompanyLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LineControllerInfrastructure.Entities.User", "LastChangedUser")
                        .WithMany()
                        .HasForeignKey("LastChangedUserId");

                    b.HasOne("LineControllerInfrastructure.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CompanyLocation");

                    b.Navigation("LastChangedUser");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.CompanyLocation", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.Device", b =>
                {
                    b.Navigation("CalibrationOrders");

                    b.Navigation("Children");

                    b.Navigation("Issues");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceCalibrationOrder", b =>
                {
                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceClass", b =>
                {
                    b.Navigation("Modes");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.DeviceIssue", b =>
                {
                    b.Navigation("Reservation")
                        .IsRequired();
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.InventoryLocation", b =>
                {
                    b.Navigation("StoragePlaces");
                });

            modelBuilder.Entity("LineControllerInfrastructure.Entities.StoragePlace", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
