@model DeviceViewModel
@{
  ViewData["Title"] = "Devices";
}
<div class="row">
  <div class="col">
    <h2>@ViewData["Title"]</h2>
  </div>
</div>
@(Html.Kendo().Grid<DeviceViewModel>().Name("Grid")
      .Columns(columns =>
      {
        columns.Command(c =>
        {
         c.Custom("editdevice")
                      .Text(" ")
                      .IconClass("k-icon k-i-edit")
                      .Click("openEditDevice")
                      .HtmlAttributes(new
                      {
                        @class = "s-grid-deviceEdit",
                        data_url = Url.Action("Edit", "Device", new { id = "__id__" })
                      });
        });
        columns.Bound(p => p.ItemNumber).Filterable(f => f.Cell(cell => cell.ShowOperators(false).Operator("contains").SuggestionOperator(FilterType.Contains))).MinScreenWidth(450);
        columns.Bound(p => p.CreatedByFirstName).Filterable(f => f.Cell(cell => cell.ShowOperators(false).Operator("contains").SuggestionOperator(FilterType.Contains))).MinScreenWidth(450);
        columns.Bound(p => p.DeviceModel).Filterable(f => f.Cell(cell => cell.ShowOperators(false).Operator("contains").SuggestionOperator(FilterType.Contains))).MinScreenWidth(450);
        columns.Bound(p => p.Designation).Hidden();
        columns.Bound(p => p.StatusName).Filterable(f => f.Cell(cell => cell.ShowOperators(false).Operator("contains").SuggestionOperator(FilterType.Contains))).MinScreenWidth(450);
        columns.Bound(p => p.ActivityType).Filterable(f => f.Cell(cell => cell.ShowOperators(false).Operator("contains").SuggestionOperator(FilterType.Contains))).MinScreenWidth(450);
        columns.Bound(p => p.CostFactor).Filterable(f => f.Cell(cell => cell.ShowOperators(false).Operator("contains").SuggestionOperator(FilterType.Contains))).MinScreenWidth(450);
        columns.Bound(p => p.InventoryNumber).Hidden();
        columns.Bound(p => p.EquipmentNumber).Hidden();
        columns.Bound(p => p.SerialNumber).Hidden();
        columns.Bound(p => p.MaterialNumber).Filterable(f => f.Cell(cell => cell.ShowOperators(false).Operator("contains").SuggestionOperator(FilterType.Contains))).MinScreenWidth(450);
        columns.Bound(p => p.IssueDate).Filterable(f => f.Cell(cell => cell.ShowOperators(false).Operator("contains").SuggestionOperator(FilterType.Contains))).MinScreenWidth(450);
        columns.Bound(p => p.IssueComment).Filterable(f => f.Cell(cell => cell.ShowOperators(false).Operator("contains").SuggestionOperator(FilterType.Contains))).MinScreenWidth(450);
        columns.Bound(p => p.AccountingNumber).Filterable(f => f.Cell(cell => cell.ShowOperators(false).Operator("contains").SuggestionOperator(FilterType.Contains))).MinScreenWidth(450);
        columns.Bound(p => p.Accessories).Filterable(f => f.Cell(cell => cell.ShowOperators(false).Operator("contains").SuggestionOperator(FilterType.Contains))).MinScreenWidth(450);
        columns.Bound(p => p.CalibrationDueDate).Filterable(f => f.Cell(cell => cell.ShowOperators(false).Operator("contains").SuggestionOperator(FilterType.Contains))).MinScreenWidth(450);
        columns.Bound(p => p.CalibrationLocation).Hidden();
        columns.Bound(p => p.CalibrationInterval).Hidden();
        columns.Bound(p => p.CreatedBy).ClientTemplate("# if (CreatedBy) { # #=CreatedBy# # } else { # --- # }#").Hidden();
        columns.Bound(p => p.CreationDate).Hidden();
      })
     .Editable(editable => editable.Mode(GridEditMode.InLine))
     .Pageable()
     .Sortable()
     .Scrollable()
     .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
     .DataSource(dataSource => dataSource
       .Ajax()
       .Model(m =>
       {
         m.Id(p => p.Id);
       })
     .Read(read => read.Action("GetDevices", "Device"))
     .PageSize(15))
     .Resizable(r => r.Columns(true))
     .HtmlAttributes(new { @class = "s-gridContent", data_action_edit = Url.Action("Edit", "Device") })
     .Deferred(true)
)